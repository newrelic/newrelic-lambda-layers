plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("io.opentracing:opentracing-util:0.33.0")
    implementation("com.newrelic.opentracing:newrelic-java-lambda:2.2.3")
    implementation("com.newrelic.opentracing:java-aws-lambda:2.1.1")
    implementation("com.amazonaws:aws-lambda-java-events:3.8.0")
    implementation("com.amazonaws:aws-lambda-java-core:1.2.0")
    implementation("com.amazonaws:aws-lambda-java-serialization:1.0.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.12.7.1")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-joda:2.12.2")
    testImplementation("junit:junit:4.13")
    testImplementation('com.github.stefanbirkner:system-lambda:1.2.0')
    testImplementation('org.mockito:mockito-core:3.12.4')
}

def extensions = copySpec {
    from('extensions')
    into('extensions')
}

task packageLayer(type: Zip) {
    archiveBaseName = 'NewRelicJavaLayer'
    into('java/lib') {
        from configurations.runtimeClasspath
    }
    into('java/lib') {
        from fileTree('build/libs') {
            include 'NewRelicJavaLayer.jar'
        }
    }
    with extensions
}

if (hasProperty('javaVersion')) {
    switch(project.getProperty('javaVersion')) {
        case "8":
            ext.javaVersion = JavaVersion.VERSION_1_8
            break
        case "11":
            ext.javaVersion = JavaVersion.VERSION_11
            break
        case "17":
            ext.javaVersion = JavaVersion.VERSION_17
            break
        case "21":
            ext.javaVersion = JavaVersion.VERSION_21
            break
        default:
            logger.lifecycle("Unrecognized javaVersion. Using 8.")
            ext.javaVersion = JavaVersion.VERSION_1_8
    }
} else {
    ext.javaVersion = JavaVersion.VERSION_1_8
}
logger.lifecycle("Using javaVersion: ${ext.javaVersion}")

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

test {
    if (javaVersion != JavaVersion.VERSION_1_8) {
        jvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED', '--add-opens', 'java.base/java.util=ALL-UNNAMED']
    }
}

packageLayer.dependsOn build
